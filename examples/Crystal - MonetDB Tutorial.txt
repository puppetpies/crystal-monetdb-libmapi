Getting start with MonetDB in the Crystal Language
==================================================

First of all if you don't what Crystal is its a Statically Typed Ruby inspired language that compiles in byte code via LLVM.

Today we are going to cover creating your own Crystal Shard project with the crystal-monetdb-libmapi project i created.

Dependencies for this are.

MonetDB Server / Client libraries installed and configured. - http://monetdb.org
Crystal >= 0.14 - http://crystal-lang.org
Shards >= 0.6.3 - https://github.com/crystal-lang/shards
git - Version control
nano - Editor

First lets create our shard project directory.

[Projects]$ crystal init app crystal-monetdb-example
      create  crystal-monetdb-example/.gitignore
      create  crystal-monetdb-example/LICENSE
      create  crystal-monetdb-example/README.md
      create  crystal-monetdb-example/.travis.yml
      create  crystal-monetdb-example/shard.yml
      create  crystal-monetdb-example/src/crystal-monetdb-example.cr
      create  crystal-monetdb-example/src/crystal-monetdb-example/version.cr
      create  crystal-monetdb-example/spec/spec_helper.cr
      create  crystal-monetdb-example/spec/crystal-monetdb-example_spec.cr
Initialized empty Git repository in /data2/Projects/crystal-monetdb-example/.git/

[Projects]$ cd crystal-monetdb-example
[crystal-monetdb-example]$ git add *
[crystal-monetdb-example]$ git commit -m "Initial commit" *
[master (root-commit) de67084] Initial commit
 7 files changed, 78 insertions(+)
 create mode 100644 LICENSE
 create mode 100644 README.md
 create mode 100644 shard.yml
 create mode 100644 spec/crystal-monetdb-example_spec.cr
 create mode 100644 spec/spec_helper.cr
 create mode 100644 src/crystal-monetdb-example.cr
 create mode 100644 src/crystal-monetdb-example/version.cr

# Add the crystal-monetdb-libmapi to your development_dependencies section to your shard.yml / complete your name & email
[crystal-monetdb-example1]$ cat shard.yml 
name: crystal-monetdb-example
version: 0.1.0

authors:
  - My Name <username@example.com>

development_dependencies:
  crystal-monetdb-libmapi:
    github: puppetpies/crystal-monetdb-libmapi
    version: ">= 0.1.1"

license: GPLv2

# Update in your git repository
[crystal-monetdb-example]$ git commit -m "Added dependency" shard.yml 
[master a4ef360] Added dependency
 1 file changed, 5 insertions(+)

# Download dependencies
[crystal-monetdb-example]$ /data2/crystal-0.14.2-1/bin/shards -v update
Updating https://github.com/puppetpies/crystal-monetdb-libmapi.git
git clone --mirror --quiet -- 'https://github.com/puppetpies/crystal-monetdb-libmapi.git' crystal-monetdb-libmapi
git tag --list --column=never
git ls-remote --get-url origin
git ls-tree -r --full-tree --name-only HEAD -- shard.yml
git show HEAD:shard.yml
git ls-tree -r --full-tree --name-only HEAD -- shard.yml
git show HEAD:shard.yml
Installing crystal-monetdb-libmapi (HEAD)
git ls-tree -r --full-tree --name-only HEAD -- shard.yml
git archive --format=tar HEAD shard.yml | tar x -C '/data2/Projects/crystal-monetdb-example/libs/crystal-monetdb-libmapi'
git ls-tree -r --full-tree --name-only HEAD -- LICENSE
git archive --format=tar --prefix= HEAD:src/ | tar x -C '/data2/Projects/crystal-monetdb-example/libs/crystal-monetdb-libmapi'
git log -n 1 --pretty=%H HEAD
git ls-tree -r --full-tree --name-only HEAD -- shard.yml
git show HEAD:shard.yml

[crystal-monetdb-example]$ git commit -m "Added dependency" shard.yml 
[master a4ef360] Added dependency
 1 file changed, 5 insertions(+)
 
Now we create ourselves a database / schema in monetdb

monetdbd create /var/monetdb5/dbfarm
monetdbd start /var/monetdb5/dbfarm
monetdb create monetdb-example1
created database in maintenance mode: monetdb-example1
monetdb release monetdb-example1
taken database out of maintenance mode: monetdb-example1
monetdb start monetdb-example1
starting database 'monetdb-example1'... done

Import from lib/crystal-monetdb-libmapi/examples.

First create a SCHEMA test
mclient -u monetdb -d monetdb-example1
password:
Welcome to mclient, the MonetDB/SQL interactive terminal (Jul2015-SP4)
Database: MonetDB v11.21.19 (Jul2015-SP4), 'mapi:monetdb://threatmonitor-suite:50000/monetdb-example1'
Type \q to quit, \? for a list of available commands
auto commit mode: on
sql>CREATE SCHEMA "test";
operation successful (7.944ms)
sql>\q

mclient -u monetdb -d monetdb-example1 < example_schema.sql
password:
operation successful
6 affected rows
operation successful

Now create the file example.cr in your Project directory with the following code.

require "crystal-monetdb-libmapi/monetdb"
require "crystal-monetdb-libmapi/monetdb_data"
require "colorize"

class ConnectionError < Exception; end
class QueryError < Exception; end
class InternalError < Exception; end
class TimeoutError < Exception; end

mero = MonetDB::ClientJSON.new
mero.host = "127.0.0.1"
mero.port = 50000
mero.username = "monetdb"
mero.password = "monetdb"
mero.db = "monetdb-example1"

query = "SELECT name, price FROM \"test\".fruits;"
mid = mero.connect
result_json = mero.query_json(mid, query)
result = mero.json_to_hash(result_json)
puts "Hash Created:".colorize(:red)
p result
puts "Display specific fields".colorize(:red)
result.each {|k,v|
  puts "Hash Key: #{k} Name: #{v["name"]} Price: #{v["price"]}"
}

Add the version control

[brian@orville examples]$ git add example.cr
[brian@orville examples]$ git commit -m "MonetDB Example" example.cr 

Now lets build the project.

[brian@orville monetdb-example1]$ crystal build example.cr
[brian@orville monetdb-example1]$ ./example 
Hash Created:
{0 => {"name" => "Apple", "price" => "9.99"}, 1 => {"name" => "Bananna", "price" => "3.99"}, 2 => {"name" => "Orange", "price" => "7.99"}, 3 => {"name" => "Peach", "price" => "5.00"}, 4 => {"name" => "Kiwi", "price" => "9.00"}, 5 => {"name" => "Tomato", "price" => "2.00"}}
Display specific fields
Hash Key: 0 Name: Apple Price: 9.99
Hash Key: 1 Name: Bananna Price: 3.99
Hash Key: 2 Name: Orange Price: 7.99
Hash Key: 3 Name: Peach Price: 5.00
Hash Key: 4 Name: Kiwi Price: 9.00
Hash Key: 5 Name: Tomato Price: 2.00

